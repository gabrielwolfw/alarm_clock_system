#include <stdio.h>
#include "altera_avalon_pio_regs.h"
#include "system.h"
#include "timer.h"
#include "utils.h"

// Definiciones básicas de macros para PIO
#define IORD_ALTERA_AVALON_PIO_DATA(BASE)  (*(volatile unsigned int *)(BASE))
#define IOWR_ALTERA_AVALON_PIO_DATA(BASE, DATA)  (*(volatile unsigned int *)(BASE) = (DATA))

// Direcciones base para los PIO
#define BUTTON_PIO_BASE PIO_BUTTONS_0_BASE
#define DISPLAY_PIO_BASE PIO_7SEGMENTS_0_BASE
#define SWITCH_PIO_BASE PIO_SWITCHES_0_BASE

// Variables globales para la configuración de la alarma
volatile int alarm_hours = 7;
volatile int alarm_minutes = 0;
volatile int alarm_enabled = 1;

// Funciones para actualizar los displays de 7 segmentos
void update_display(int display_num, int value) {
    // Enviar valor al display especificado
    IOWR_ALTERA_AVALON_PIO_DATA(DISPLAY_PIO_BASE + display_num * 4, value);  // Ajustar según cómo se direccionan los displays
}

// Función para manejar la configuración de la alarma con botones y switches
void handle_buttons() {
    int btns = IORD_ALTERA_AVALON_PIO_DATA(BUTTON_PIO_BASE);
    int switches = IORD_ALTERA_AVALON_PIO_DATA(SWITCH_PIO_BASE);

    if (btns & 0x01) {  // Botón 1
        alarm_hours = (alarm_hours + 1) % 24;
    }
    if (btns & 0x02) {  // Botón 2
        alarm_minutes = (alarm_minutes + 1) % 60;
    }
    if (btns & 0x04) {  // Botón 3
        if (switches & 0x01) {  // Si el switch está en 1
            save_alarm_configuration();
        } else {  // Si el switch está en 0
            save_current_time_configuration();
        }
    }
    if (btns & 0x08) {  // Botón 4
        alarm_enabled = 0;
    }
}

// Función para actualizar la visualización del reloj y la alarma
void update_time_display() {
    int hours_display = (alarm_hours / 10) << 4 | (alarm_hours % 10);
    int minutes_display = (alarm_minutes / 10) << 4 | (alarm_minutes % 10);
    int alarm_hours_display = (alarm_hours / 10) << 4 | (alarm_hours % 10);
    int alarm_minutes_display = (alarm_minutes / 10) << 4 | (alarm_minutes % 10);

    // Actualizar los displays
    update_display(0, hours_display);
    update_display(1, minutes_display);
    update_display(2, alarm_hours_display);
    update_display(3, alarm_minutes_display);
}

int main() {
    init_timer();
    load_alarm_configuration();  // Cargar configuración al inicio
    load_current_time_configuration();  // Cargar configuración de tiempo actual

    while (1) {
        handle_buttons();
        update_time_display();
        // Puedes agregar otras tareas aquí
    }

    return 0;
}
